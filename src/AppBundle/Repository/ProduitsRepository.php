<?php

namespace AppBundle\Repository;


use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * ProduitsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitsRepository extends EntityRepository
{
//    public function findProduitBySexe($sexe)
//    {
//
//        $queryBuilder = $this->createQueryBuilder('p');
//        $queryBuilder->innerJoin('p.famille', 'fam')
//            ->addSelect('fam')
//            ->where($queryBuilder->expr()->eq('fam.sexe', ':sexe'))
//            ->setParameters(array('sexe' => $sexe));
//
//        return $queryBuilder
//            ->getQuery()
//            ->getResult();
//
//    }

    public function findProduitsByFamille($id)
    {
        $queryBuilder = $this->_em->createQuery('SELECT p.id,p.libelle,p.prix,p.description, p.image,
        ta.taille, pe.nomEthique as ethique, fa.famille, c.name as couleur , fo.nomMarque as marque
        FROM AppBundle:Produits p LEFT JOIN AppBundle:DeclinaisonEthique e WITH e.produit=p LEFT JOIN e.pointEthique pe
        LEFT JOIN AppBundle:DeclinaisonTaille t WITH t.produit=p LEFT JOIN t.taille ta
        LEFT JOIN p.famille fa LEFT JOIN p.couleur c LEFT JOIN p.fournisseur fo
        WHERE fa.id = :id')
            ->setParameter('id', $id);

        return $queryBuilder
            ->getResult();
    }


    public function findProduitsByFamillebySexe($id, $sexe)
    {

        $queryBuilder = $this->_em->createQuery('SELECT p.id,p.libelle,p.prix,p.description, p.image,
        ta.taille, pe.nomEthique as ethique, fa.famille, c.name as couleur , fo.nomMarque as marque
        FROM AppBundle:Produits p LEFT JOIN AppBundle:DeclinaisonEthique e WITH e.produit=p LEFT JOIN e.pointEthique pe
        LEFT JOIN AppBundle:DeclinaisonTaille t WITH t.produit=p LEFT JOIN t.taille ta
        LEFT JOIN p.famille fa LEFT JOIN p.couleur c LEFT JOIN p.fournisseur fo
        WHERE fa.id = :id AND fa.sexe=:sexe')
            ->setParameter('id', $id)
            ->setParameter('sexe', $sexe);

        return $queryBuilder
            ->getResult();
    }



    public function findProduitsByFamilleGlobalebySexe($id, $sexe)
    {

        $queryBuilder = $this->_em->createQuery('SELECT p.id,p.libelle,p.prix,p.description, p.image,
        ta.taille, pe.nomEthique as ethique, fa.famille, c.name as couleur , fo.nomMarque as marque
        FROM AppBundle:Produits p LEFT JOIN AppBundle:DeclinaisonEthique e WITH e.produit=p LEFT JOIN e.pointEthique pe
        LEFT JOIN AppBundle:DeclinaisonTaille t WITH t.produit=p LEFT JOIN t.taille ta
        LEFT JOIN p.famille fa LEFT JOIN p.couleur c LEFT JOIN p.fournisseur fo
       WHERE fa.familleGlobal = :id AND fa.sexe=:sexe')
            ->setParameter('id', $id)
            ->setParameter('sexe', $sexe);

        return $queryBuilder
            ->getResult();
    }


    public function findEverything()
    {
        $queryBuilder = $this->_em->createQuery('SELECT p.id,p.libelle,p.prix,p.description,
ta.taille, pe.nomEthique as ethique, fa.famille, c.name as couleur , fo.nomMarque as marque
        FROM AppBundle:Produits p LEFT JOIN AppBundle:DeclinaisonEthique e WITH e.produit=p LEFT JOIN e.pointEthique pe
       LEFT JOIN AppBundle:DeclinaisonTaille t WITH t.produit=p LEFT JOIN t.taille ta
       LEFT JOIN p.famille fa LEFT JOIN p.couleur c LEFT JOIN p.fournisseur fo');

        return $queryBuilder
            ->getResult();
    }


    public function findEverythingSexe($sexe)
    {
        $queryBuilder = $this->_em->createQuery('SELECT p.id,p.libelle,p.prix,p.description, p.image,
ta.taille, pe.nomEthique as ethique, fa.famille, c.name as couleur , fo.nomMarque as marque
        FROM AppBundle:Produits p LEFT JOIN AppBundle:DeclinaisonEthique e WITH e.produit=p LEFT JOIN e.pointEthique pe
       LEFT JOIN AppBundle:DeclinaisonTaille t WITH t.produit=p LEFT JOIN t.taille ta
       LEFT JOIN p.famille fa LEFT JOIN p.couleur c LEFT JOIN p.fournisseur fo
       WHERE fa.sexe = :sexe')
            ->setParameter('sexe', $sexe);

        return $queryBuilder
            ->getResult();
    }

}
